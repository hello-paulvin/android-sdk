apply plugin: 'com.android.application'
apply plugin: "com.browserstack.gradle"

assemble.dependsOn('lint')

android {

    lintOptions {
        abortOnError true
        checkDependencies true
        ignoreWarnings true
    }

    compileOptions {
        sourceCompatibility rootProject.javaCompatVersion
        targetCompatibility rootProject.javaCompatVersion
    }

    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId "net.optile.example.basic"
        minSdkVersion rootProject.examplesMinSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resValue "string", "paymentapi_auth", "$System.env.ANDROIDSDK_PAYMENTAPI_AUTH"
        resValue "string", "paymentapi_url", "$System.env.ANDROIDSDK_PAYMENTAPI_URL"
    }

    buildTypes {
        debug {
            testVariants.all { testVariant ->
                testVariant.outputs.all { output ->
                    outputFileName = "Example-Basic-${getCurrentBranch()}-debug-androidTest.apk"
                }
            }
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "Example-Basic-${getCurrentBranch()}-debug.apk"
                }
            }
        }
    }
    sourceSets {
        androidTest {
            java.srcDirs += '../payment/src/sharedTest/java'
            res.srcDirs += '../payment/src/sharedTest/res'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.google.android.material:material:${rootProject.androidMaterialVersion}"
    implementation project(":payment")

    testImplementation "androidx.test.ext:junit:${rootProject.androidxTestJunitVersion}"
    testImplementation "org.hamcrest:hamcrest-library:${rootProject.harmcrestVersion}"

    androidTestImplementation "androidx.test.ext:junit:${rootProject.androidxTestJunitVersion}"
    androidTestImplementation "androidx.test:runner:${rootProject.androidxTestRunnerVersion}"
    androidTestImplementation "androidx.test:rules:${rootProject.androidxTestRulesVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.androidxTestEspressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${rootProject.androidxTestEspressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${rootProject.androidxTestEspressoVersion}"
}

task uploadToAppLive {
    if (System.getenv('BROWSERSTACK_USER') == null || System.getenv('BROWSERSTACK_KEY') == null) {
        logger.warn('Missing Browserstack functional test environment variables')
        return
    }
    dependsOn('uploadDebugToBrowserstackAppLive')
    dependsOn('clean')
    clean.mustRunAfter('uploadDebugToBrowserstackAppLive')
}

task runFunctionalTest {
    if (System.getenv('ANDROIDSDK_PAYMENTAPI_AUTH') == null || System.getenv('ANDROIDSDK_PAYMENTAPI_AUTH') == null) {
        logger.warn('Missing Android-SDK functional test environment variables')
        return
    }
    if (System.getenv('BROWSERSTACK_USER') == null || System.getenv('BROWSERSTACK_KEY') == null) {
        logger.warn('Missing Browserstack functional test environment variables')
        return
    }
    dependsOn('executeDebugTestsOnBrowserstack')
    dependsOn('clean')
    clean.mustRunAfter('executeDebugTestsOnBrowserstack')
}

browserStackConfig {
    username = "$System.env.BROWSERSTACK_USER"
    accessKey = "$System.env.BROWSERSTACK_KEY"
    customBuildName = "Example-Basic ${getCurrentBranch()}"
    devices = ['Google Pixel 3a-9.0']
}
