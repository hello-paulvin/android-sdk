apply plugin: 'com.android.library'
apply plugin: 'maven'

assemble.dependsOn('lint')

configurations {
    deployerJars
}

android {

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    compileOptions {
        sourceCompatibility rootProject.javaCompatVersion
        targetCompatibility rootProject.javaCompatVersion
    }

    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resValue "string", "paymentapi_auth", "$System.env.ANDROIDSDK_PAYMENTAPI_AUTH"
        resValue "string", "paymentapi_url", "$System.env.ANDROIDSDK_PAYMENTAPI_URL"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        libraryVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "optile-payment-${variant.name}-${defaultConfig.versionName}.aar"
            }
        }
    }

    sourceSets {
        androidTest {
            java.srcDirs += '../payment/src/sharedTest/java'
            res.srcDirs += '../payment/src/sharedTest/res'
        }
    }
}

dependencies {
    implementation "com.google.android.material:material:${rootProject.androidMaterialVersion}"
    implementation "androidx.browser:browser:${rootProject.androidxBrowserVersion}"
    implementation "com.google.code.gson:gson:${rootProject.gsonVersion}"
    implementation "androidx.test.espresso:espresso-idling-resource:${rootProject.androidxTestEspressoVersion}@aar"
    implementation("com.github.bumptech.glide:glide:${rootProject.bumptechGlideVersion}") {
        exclude group: "com.android.support"
    }
    testImplementation "io.github.json-snapshot:json-snapshot:${rootProject.jsonsnapshotVersion}"
    testImplementation "org.mockito:mockito-core:${rootProject.mockitoCoreVersion}"
    testImplementation "org.robolectric:robolectric:${rootProject.robolectricVersion}"
    testImplementation "androidx.test:core:${rootProject.androidxTestCoreVersion}"
    testImplementation "androidx.test.ext:junit:${rootProject.androidxTestJunitVersion}"
    testImplementation "org.hamcrest:hamcrest-library:${rootProject.harmcrestVersion}"

    androidTestImplementation "androidx.test.ext:junit:${rootProject.androidxTestJunitVersion}"
    androidTestImplementation "androidx.test:runner:${rootProject.androidxTestRunnerVersion}"
    androidTestImplementation "androidx.test:rules:${rootProject.androidxTestRulesVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.androidxTestEspressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${rootProject.androidxTestEspressoVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${rootProject.androidxTestEspressoVersion}"

    deployerJars "io.packagecloud.maven.wagon:maven-packagecloud-wagon:${rootProject.packagecloudWagonVersion}"
}

//
// This task contains the upload repositories for Nexus release & shapshot
//
uploadArchives {
    if (!(project.hasProperty('mavenUser') && project.hasProperty('mavenPassword'))) {
        logger.warn('Missing mavenUser and/or mavenPassword from ~/.gradle/gradle.properties in uploadArchives task')
        return
    }
    repositories {
        mavenDeployer {
            repository(url: "https://nexus.mgmt.oscato.com/repository/releases/") {
                authentication(userName: mavenUser, password: mavenPassword)
                pom.version = versionName
                pom.artifactId = "android-sdk"
                pom.groupId = "com.oscato.mobile"
            }
            snapshotRepository(url: "https://nexus.mgmt.oscato.com/repository/snapshots/") {
                authentication(userName: mavenUser, password: mavenPassword)
                pom.version = versionName
                pom.artifactId = "android-sdk"
                pom.groupId = "com.oscato.mobile"
            }
        }
    }
}

//
// This contains an additional task to upload to external packagecloud.io.
// Run using: gradle uploadExternal
// 
// Documentation about packagecloud gradle at:
// https://packagecloud.io/docs#gradle_deploy
// 
task uploadExternal(type: Upload) {
    if (!project.hasProperty('packageCloudMavenPassword')) {
        logger.warn('Missing packageCloudMavenPassword from ~/.gradle/gradle.properties in uploadExternal task')
        return
    }
    configuration = configurations.archives
    uploadDescriptor = true

    repositories.mavenDeployer {
        configuration = configurations.deployerJars

        repository(url: "packagecloud+https://packagecloud.io/optile/repo") {
            authentication(password: packageCloudMavenPassword)
            pom.version = versionName
            pom.artifactId = "android-sdk"
            pom.groupId = "com.oscato.mobile"
        }
    }
}